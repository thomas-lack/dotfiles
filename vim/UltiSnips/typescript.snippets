snippet fn "complete lambda function"
(($1) => {
	$2
});$0
endsnippet

snippet ff "minimal lambda function"
($1) => {
	$0
}
endsnippet

snippet log "console.log"
console.log('${1:log variable}', $1);$0
endsnippet

snippet sub "RxJS subscribe"
.subscribe(($1) => {
	$2
})$0
endsnippet

snippet map "RxJS / Array map"
.map($1 => {
	$2
})$0
endsnippet

snippet if "If statement"
if ($1) {
	$2
}$0
endsnippet

snippet for "For statement"
for (let ${1:i} = 0; $1 <= $2; $1++) {
	$3	
}$0
endsnippet

snippet switch "Switch statement"
switch ($1) {
	case $2:
		$3
		break;

	case $3:
		$4
		break;

	default:
		// noop
}$0
endsnippet

snippet imp "Import statement"
import { $2 } from '$1';$0
endsnippet

snippet exp "Export statement"
export { $2 } from '$1';$0
endsnippet

snippet it "Jasmine: it statement"
it('should ${1:test condition}', () => {
	$2
	expect();
});$0
endsnippet

snippet spy "Jasmine: spyOn statement"
spyOn(${1:(<any>component).}, '$2');
endsnippet

snippet spec "Jasmine spec"
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';

import { $1 } from './';

describe('${1:ComponentClassName}', () => {
	let component: $1;
	let fixture: ComponentFixture<$1>;

	beforeEach(async(() => {
		TestBed.configureTestingModule({
			imports: [

			],
			declarations: [
				$1
			],
			providers: [
			
			],
			schemas: [ CUSTOM_ELEMENTS_SCHEMA ]
		});
	}));

	beforeEach(() => {
		fixture = TestBed.createComponent($1);
		component = fixture.componentInstance;
		fixture.detectChanges();
	});

	it('should create', () => {
		expect(component).toBeTruthy();
	});
});$0
endsnippet

snippet comp "Angular component"
import { Component, OnInit } from '@angular/core';

@Component({
	selector: 'cmms-${2:ComponentSelector}',  
	templateUrl: './${1:ComponentFileName}.component.html',  
	styleUrls: [ './$1.component.css' ]
}) 
export class ${3:ComponentClassName}Component implements OnInit {  
	constructor() { }  
	
	ngOnInit() { }
}$0
endsnippet

snippet module "Angular module"
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { AgGridModule } from 'ag-grid-angular';
// import { StoreModule } from '@ngrx/store';

import { SharedModule } from '../shared/shared.module';
import { routes } from './${1:ModuleFilename}.routes';
import {
	${2:ImportComponentClassName}
} from './components';
// import { reducer } from './state';


@NgModule({
	declarations: [
		$2
	],
	entryComponents: [
	],
	imports: [
		SharedModule,

		RouterModule.forChild(routes),
		AgGridModule.withComponents([]),

		// StoreModule.forFeature('feature-name', reducer),
	],
	exports: [
	]
})
export class ${3:ModuleClassName} { }$0
endsnippet
