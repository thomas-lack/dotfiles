execute pathogen#infect()

" Vim backup settings
if has("mac")
  set backupdir=$TMPDIR//
  set directory=$TMPDIR//
endif
if has("unix")
  set backupdir=$HOME/.vim/swapfiles//
  set directory=$HOME/.vim/swapfiles//
endif

" Vim UI settings
set showmode				" display current mode
set number relativenumber	" show hybrid relative line numbers
set t_Co=256				" set 256 colors
set background=dark
colorscheme lack

" Vim GUI settings
if has("gui_running")
  set macligatures
  set guifont=FuraCode\ Nerd\ Font\ Mono:h12
  set anti
endif

" Airline settings
let g:airline_theme='badwolf'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
" Airline symbols
let g:airline_symbols.space = "\ua0"
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = 'ÓÇ°'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'

" define <leader> key
let mapleader = "\\"

" reduce timeout length for a snappier ESC key
set timeoutlen=100 ttimeoutlen=0
set notimeout
set ttimeout

" loose vi compatibility
set nocompatible

" turn on syntax highlighting
syntax on

" set clipboard as default register
set clipboard=unnamed

" turn on mouse support
set mouse=a

" ruler settings
set ruler
set showcmd			" show partial commands in status line
								" and selected characters/lines in visual mode
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%101v', 255)

" do not break words on linebreak and indent automatically if linebreaking in
" tags
set breakindent
set wrap linebreak nolist

" make vim try to detect file types and load plugins for them
filetype on
filetype plugin on
filetype indent on

" show the current command in the lower right corner
set showcmd

" encoding is utf-8
set encoding=utf-8
set fileencoding=utf-8

" set unix line endings
set fileformat=unix
" when reading files try unix line endings then dos, use unix for new buffers
set fileformats=unix,dos

" screen will not be redrawn while running macros, registers or other
" non-typed comments
set lazyredraw

" indentation settings
set tabstop=2				" the width of tabs is set to 2
set shiftwidth=2		" indents will have a width of 2
set softtabstop=2		" sets the # of columns for tabs
set expandtab				" expand tabs to spaces
set autoindent

" search settings
set hlsearch							" highlight search terms
set ignorecase							" case insensitive
nnoremap <CR> :noh<CR><CR>:<backspace>	" press enter to get rid of search results

" scrolling
set scrolljump=8		" lines to scroll when cursor leaves the screen
set scrolloff=3			" minimum lines to keep above and below cursor
nnoremap J 10jzz
nnoremap K 10kzz

" map ; to "write ; at end of line"
nnoremap ; A;<ESC>

" do not show current cursor position because of speed issues
set nocursorline
set nocursorcolumn

" folding in xml files
set foldmethod=syntax
set foldlevel=4
set foldlevelstart=20

" set number format always to decimal
set nrformats=alpha

" Buffers
set hidden				" allow changing buffers with unsaved changes
" show buffer list by pressing F3, select number to change buffer
nnoremap <F3> :buffers<CR>:buffer<Space>
" create split buffers with \v and \h
nnoremap <leader>v <C-w>v
nnoremap <leader>h <C-w>s
" reload buffers if changed outside of vim, do so at least if focussing on a
" buffer
set autoread
autocmd FocusGained * checktime

" Split window navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap , <C-w><C-w>
nmap <Tab> <C-w><C-w>

" disable error sounds
set noerrorbells

" NERDTree
" automatically close vim if only NERDTree is opened
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <F2> :NERDTreeToggle<CR> 
let g:NERDTreeWinSize=45

" rainbow parentheses
let g:rainbow_active = 1

" closetag
let g:closetag_filenames = '*.html, *.xhtml, *.jsx, *.xml'
let g:closetag_xhtml_filenames = '*.xhtml, *.jsx, *.xmlcs'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'

" vim-javascript
let g:javascript_plugin_jsdoc = 1

" vim-jsdoc
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_underscore_private = 1
let g:jsdoc_enable_es6 = 1

" tsuquyomi (typescript ide)
let g:tsuquyomi_disable_quickfix = 1	" let syntastic do error rendering
let g:tsuquyomi_single_quote_import = 1
nmap gd <C-]>   " calls :TsuDefinition, goto definition
nmap gb <C-t>   " goto last call of :TsuDefinition
nnoremap <leader>i :TsuImport<CR>

" sytastic syntax checker settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1
let g:syntastic_javascript_checkers = [ 'eslint', 'jshint' ]
if has("gui_running")
  let g:syntastic_typescript_checkers = [ 'tslint' ]
else
  let g:syntastic_typescript_checkers = [ 'tsuquyomi' ]
endif

" ctrl-p file buffer settings
let g:ctrlp_max_files = 0
let g:ctrlp_working_path_mode = ''
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|target'

" bufkill settings
map <C-c> :BD<cr>				" map Ctrl-c to close the current buffer

" vim-javacomplete2 settings
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" UltiSnips settings
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
      if pumvisible()
        return "\<C-n>"
      else
        call UltiSnips#JumpForwards()
        if g:ulti_jump_forwards_res == 0
          return "\<TAB>"
        endif
      endif
    endif
    return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif
  return ""
endfunction

if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<c-k>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<c-j>"
endif

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"

" EasyMotion settings
map <Space> <Plug>(easymotion-bd-w)
nmap <Space> <Plug>(easymotion-overwin-w)
